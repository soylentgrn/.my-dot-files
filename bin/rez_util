#!/bin/env ruby

require 'rest-client'
require 'resolv'
require 'ipaddr_extensions'
require 'hashdiff'
require 'trollop'
require 'pathname'
require 'json'
require 'yaml'
require 'pp'

def dns_status(fqdn,ip,verify)
  status = ''
  if verify
    status = ": #{resolve(fqdn,ip)}"
  end
  puts "#{fqdn} #{ip} #{status}"
end

def dns(opts)
  opts[:path] = "rez_zapi/v1/resource/#{opts[:type]}/#{opts[:id]}"
  puts "#{opts[:id]} dns entries:"
  results = rest(opts).get
  data = JSON.parse(results)
  esx = data['response']['entity']['config']['esx']
  esx.each do |k, v|
    status = ''
    if opts[:verify]
      status = ": #{resolve(v['fqdn'], v['vmk0']['ip_addr'])}"
    end
    puts "#{v['fqdn']} #{v['vmk0']['ip_addr']}#{status}"
  end

  # normal exclusions not currently relevant to show, vcd_a/b will be shown later
  dns_exclusions = [ 'vcd_x' ,'vccsn','vccmt','vcd_a','vcd_b','vrs']
  # cldprxy-a|b seeem to still be in praxis-core list
  dns_exclusions << ['cldprxy_a','cldprxy_b'] unless data['response']['entity']['config']['step_dr2c']

  if data['response']['entity']['config']['vpc']['vms']
    data['response']['entity']['config']['vpc']['vms'].each do |k,v|
      next if dns_exclusions.include?(k)
      next unless v['network']['eth0'] and v['network']['eth0']['ip_addr']
      fqdn   = v['network']['eth0']['fqdn']
      ip     = v['network']['eth0']['ip_addr']
      dns_status(fqdn,ip,opts[:verify])
    end
  end

  # list our vcd_cells
  if data['response']['entity']['config']['vpc']['vm_extras']['list']['vcd_keys_inuse']
    data['response']['entity']['config']['vpc']['vm_extras']['list']['vcd_keys_inuse'].each do |vm|
      fqdn = data['response']['entity']['config']['vpc']['vms']['vcd_x'][vm]['fqdn']
      ip   = data['response']['entity']['config']['vpc']['vms']['vcd_x'][vm]['network']['eth0']['ip_addr']
      dns_status(fqdn,ip,opts[:verify])
    end
  end

  # for dr2c, list the vrs servers
  if data['response']['entity']['config']['step_dr2c']
    data['response']['entity']['config']['vpc']['vms']['vrs'].each do |k,v|
      next unless v['network']['eth0'] and v['network']['eth0']['ip_addr']
      fqdn   = v['network']['eth0']['fqdn']
      ip     = v['network']['eth0']['ip_addr']
      dns_status(fqdn,ip,opts[:verify])
    end
  end

  if opts[:ticket]
    ticket(opts[:ticket], "#{opts[:id]} dns entries:",
      esx.collect{|k,v| "#{v['fqdn']} #{v['vmk0']['ip_addr']}"}.join("\r\n"))
  end
end

def ticket(task_id, subject, description)
  require 'service_now'
  require 'highline/import'
  username = ask('ServiceNow username:') { |q| q.echo = true }
  password = ask('ServiceNow password:') { |q| q.echo = false}
  session = ServiceNow::Session.new('https://vchs.service-now.com/', :username => username, :password => password)
  parent = session.get('work', 'query' => "number=#{task_id}")
  raise Error, "Cannot find parent ticket #{task_id}" unless parent.size == 1
  parent_id = parent.first['sys_id']

  content = {
    'assignment_group'=> '80767dfc6fc10100ee4401dfde3ee474',
    'description' => description,
    'parent'=> parent_id,
    'priority'=> '3',
    'short_description'=> subject,
    'state'=> '1',
    'u_category'=> 'infrastructure',
    'u_subcategory'=> 'infrastructure|build',
    'u_subcategory_detail'=> 'infrastructure|build|pod',
    'u_type'=> 'Build',
  }

  result = session.create ServiceNow::Work.new(content)
  raise Error, "Cannot create ticket \n #{result}" unless result.size == 1
  puts "ServiceNow DNS Ticket: #{result.first['number']}"
end

def resolve(hostname, ip)
  require 'resolv'
  address = Resolv.getaddress(hostname) 
  if address == ip
    'success'
  else
    'mismatch'
  end
rescue Resolv::ResolvError => e
  result = e.message
end

def rabbitmq_config(server)
  require 'log4r'
  require 'zombie/rez/common'
  root_dir = Pathname.new(__FILE__).expand_path.parent.parent
  lib_dir  = root_dir.join('lib')
  $LOAD_PATH.unshift lib_dir unless $LOAD_PATH.include?(lib_dir)
  require 'messages'
  detect_mqnode(server)
end

def detect_mqnode(server)
  server = server.to_ip rescue server = Resolv.getaddress(server)
  server = server.to_s
  data = {
    'Shard2 Temp' => [ '10.2.3.217', '10.2.3.218' ],
    'Production'  => [ '10.2.3.31', '10.2.3.32' ],
  }
  connection = "Warning: unknown RabbitMQ server"
  data.each do |env, servers|
    if servers.include? server
      connection = "Connecting to RabbitMQ in '#{env}': #{servers.inspect}"
      break
    end
  end
  puts connection
end

def parse_ids(ids)
  if ids.include?('..')
    range  = ids.split('..')
    raise ArgumentError, "Invalid range #{ids}" unless range.size == 2
    range_start, range_stop  = range
    (range_start..range_stop).to_a
  else
    ids.split(',')
  end
end

def unreserve(opts)
  rabbitmq_config(opts[:server])
  ids = parse_ids(opts[:ids])
  ids.each do |id|
    puts "Connecting to #{opts[:server]} to unreserve #{opts[:type]}: #{id} held by #{opts[:res_id]}"
    unless opts[:dry_run]
      puts "id = #{id}, opts[:type] = #{opts[:type]}, opts[:res_id] = #{opts[:res_id]}"
      req = Zombie::Rez::Common::Reservation::Unreserve.new(:entity_id => id, :resource_type => opts[:type], :holder_id => opts[:res_id])
      Messages.publish_commands([req.to_command], opts[:server])
      pp req.to_command if opts[:debug]
    end
  end
end

def reserve(opts)
  rabbitmq_config(opts[:server])
  ids = parse_ids(opts[:ids])
  ids.each do |id|
    unless opts[:dry_run]
      puts "id = #{id}, opts[:type] = #{opts[:type]}, opts[:res_id] = #{opts[:res_id]}"
      puts "Connecting to #{opts[:server]} to reserve #{opts[:type]}: #{id} held by #{opts[:res_id]}"
      req = Zombie::Rez::Common::Reservation::Request.new(:entity_id => id, :resource_type => opts[:type], :holder_id => opts[:res_id])
      Messages.publish_commands([req.to_command], opts[:server])
      pp req.to_command if opts[:debug]
    end
  end
end

def register(opts)
  rabbitmq_config(opts[:server])
  attributes = {}
  config = {}
  #parameters = {
  #  :vpc_id => opts[:id],
  #  :pod_base_network => "10.0.0.0/8",
  #  :management_dns_zone => 'prod.vpc.vmw',
  #  :count_compute => opts[:compute],
  #  :count_storage_volume => opts[:storage],
  #  :vcd_version => opts[:vcd_version],
  #  :cloud_type => opts[:cloudtype],
  #}
  pod_number = opts[:id].match(/p(\d+)v/)[1]
  request = {
    :entity_id => opts[:id],
    :resource_type        => opts[:type],
    :attributes           => {},
    :config               => {},
    :selection_parameters => {
      :types => {
        :compute        => opts[:compute],
        :storage_volume => opts[:storage],
      },
      :pod_number         => pod_number,
      :shard_number       => opts[:shard],
    },
    :resource_parameters  => {
      :vpc_id                  => opts[:id],
      :pod_base_network        => opts[:pod_base_network],
      :management_dns_zone     => opts[:management_dns_zone],
      :count_compute           => opts[:compute],
      :count_storage_volume    => opts[:storage],
      :vcd_version             => opts[:vcd_version],
      :vcd_cell_count          => opts[:vcd_cell_count],
      :cloud_type              => opts[:cloudtype],
      :network_manager_version => opts[:network_manager_version],
    }, 
  }
  req = Zombie::Rez::Common::ComplexRegistration::Request.new(request)
  puts "Connecting to  #{opts[:server]} to register #{opts[:id]} with #{opts[:compute]} compute and #{opts[:storage]} storage"
  pp req.to_command if opts[:debug]
  Messages.publish_commands([req.to_command], opts[:server]) unless opts[:dry_run]
end

def delete(opts)
  data = RestClient.get("#{url(opts)}/#{opts[:type]}/#{opts[:id]}", :content_type => :json, :accept => :json)
  data = JSON.parse(data)

  data = data['response']['entity']['config']['vpc']

  compute = data['compute'].collect{|x,y| y['id']} rescue compute = []
  storage = data['storage_volume'].collect{|x,y| y['id']} rescue storage = []
  puts "VPC #{opts[:id]}"
  puts "Compute #{compute.inspect}"
  puts "Storage #{storage.inspect}"
  result = JSON.parse(RestClient.get("#{url(opts)}/#{opts[:type]}/#{opts[:id]}", :content_type => :json, :accept => :json)) rescue nil

  lock_id = result['response']['entity']['lock_id'] if result
  puts "LockID #{lock_id}"

  if continue("Delete VPC #{opts[:id]} (Y/N)?:")
    puts "Unreserving compute"
    compute_opts = {
      :server => opts[:rmq_server],
      :ids => compute.join(','),
      :res_id => "resource.#{opts[:type]}:#{opts[:id]}",
      :type => 'compute'
    }
    unreserve(compute_opts)
    puts "Unreserving storage"
    storage_opts = {
      :server => opts[:rmq_server],
      :ids => storage.join(','),
      :res_id => "resource.#{opts[:type]}:#{opts[:id]}",
      :type => 'storage_volume'
    }
    unreserve(storage_opts)
    puts "Removing Lock #{opts[:id]} by sending DELETE to #{url(opts)}/#{opts[:type]}/#{opts[:id]}/build-flag?lock_id=#{lock_id}"
    RestClient.delete("#{url(opts)}/#{opts[:type]}/#{opts[:id]}/build-flag?lock_id=#{lock_id}", :content_type => :json, :accept => :json) if lock_id
    puts "Deleting VPC-standard #{opts[:id]} by sending DELETE to #{url(opts)}/#{opts[:type]}/#{opts[:id]}"
    RestClient.delete("#{url(opts)}/#{opts[:type]}/#{opts[:id]}", :content_type => :json, :accept => :json)
  else
    puts "Skipping delete..."
  end
rescue RestClient::ResourceNotFound
  puts "Unable to find VPC #{opts[:id]}\n"
end

def url(opts)
  "http://#{opts[:server]}:#{opts[:port]}/#{opts[:path]}"
end

def rest(opts)
  puts "Connecting to: #{url(opts)}" if opts[:debug]
  RestClient::Resource.new(url(opts))
end

def list(opts)
  puts "#{opts[:type]} resources:"
  results = rest(opts).get(:params => {
    :type => opts[:type],
    :limit => opts[:limit],
    :sort_by => 'id',
    :reserved => opts[:reserved]
  })
  pp JSON.parse(results)
end

def continue(msg, echo = true)
  require 'highline/import'
  response = ask(msg) { |q| q.echo = echo }
  response.upcase == 'Y'
end

def update(opts)
  result = rest(opts)[opts[:id]].get
  data = JSON.parse(result)
  config = data['response']['entity']['config']
  id = opts[:id]
  File.write("#{id}.old", config.to_yaml) unless File.exists?("#{id}.old")
  File.write("#{id}.new", config.to_yaml) if opts[:backup]
  #ntpserver = Resolv.getaddress config["step_vpc_base"]["vsm_ntpservers"]
  #ntpserver = ntpserver.split('.')
  #ntpserver[3] = 83
  #ntpserver = ntpserver.join('.')
  #config['step_vpc_base']['tlm_vc']['hostname'] = 'd5p6tlm-mgmt-vc0.prod.vpc.vmw'
  #config["step_vpc_base"]["vsm_ntpservers"] = ntpserver
  #config['step_vse']['tlm_vc_hostname'] = 'd5p6tlm-mgmt-vc0.prod.vpc.vmw'

  #ntpserver = Resolv.getaddress config["step_vpc_base"]["vsm_ntpservers"]
  #ntpserver = ntpserver.split('.')
  #ntpserver[3] = 83
  #ntpserver = ntpserver.join('.')
  #config["step_vpc_base"]["vsm_ntpservers"] = ntpserver
  #config['step_vpc_base']['compute_nodes']['esx0']['uuid'] = 'q8EnCXU7tBwMdQH4gcV5z'
  #config['step_vpc_base']['compute_nodes']['esx1']['uuid'] = '4HTjIE5YD2beDO4os6XrXr'
  #config['step_dr2c']['vcd_server'] = '10.2.232.3'
  #config['step_dr2c']['vrs_stunnel_rpm'] = 'stunnel-4.36-0.10.1.x86_64.rpm'
  #config['step_dr20']['hms_config']['keystore_path'] = "/opt/vmware/hms/security/hms-keystore.jks"
  #config['step_dr20']['vpc_vcsso_common']['ova'] = "/opt/zombie/ova/VMware-vCenter-Server-Appliance-5.5.0.20100-2170515-with-vapp-20141006.ova"  
  #config['step_dr20']['dr2c_vcd_roles'] = config['step_dr20']['dr20_vcd_roles']
  
  #config['step_vpc_base']['compute_nodes']['esx0']['uuid'] = '2sohLVVvADjzt8TCjlJtsJ'
  #config['step_vpc_base']['compute_nodes']['esx1']['uuid'] = '2NgEIJUO5xj70aPFXbJupo'
  #config['step_vc_esxnode']['hosts'][0]['storage_address'] = "172.28.8.127"
  #config['step_vc_esxnode']['hosts'][1]['storage_address'] = "172.28.8.127"

  config['vpc']['vcd_api_version'] = "8.7.1"
  config['vpc']['vcd_version'] = "8.7.1"
  config['vpc']['network_manager_version'] = "6.1.5"
  config['step_vcd']['puppetmaster'] = "172.28.3.206"
  config['step_vpc_base']['puppetmaster'] = "172.28.3.206"

  data = { :request => {
    :config => config,
    :client_type => 'manual',
    :client_id => 'NaN',
  } }

  original = YAML.load_file("#{id}.old")
  puts "Configuration difference:"
  diff = HashDiff.diff(original, config)
  diff.each do |i|
    pp i
  end

  if continue('Update Rez(Y/N)?:')
    puts "Updating VPC-standard #{opts[:id]} ..."
    RestClient.post("#{url(opts)}/#{opts[:id]}/config", data.to_json, :content_type => :json, :accept => :json)
  else
    puts "Skipping update ..."
  end
end

def buildflag
  result = JSON.parse(RestClient.get("#{url(opts)}/#{opts[:type]}/#{opts[:id]}", :content_type => :json, :accept => :json)) rescue nil

  lock_id = result['response']['entity']['lock_id'] if result
  puts "LockID #{lock_id}"
  RestClient.delete("#{url(opts)}/#{opts[:type]}/#{opts[:id]}/build-flag?lock_id=#{lock_id}", :content_type => :json, :accept => :json) if lock_id

end

def common_opts
  opt :server, 'Zombie command server address', :type => :string
  opt :port, 'Zombie Rez server port', :default => 8080
  opt :path, 'Rez resource path', :default => 'rez_zapi/v1/resource'
  opt :debug, 'Provide debugging', :default => false, :short => '-d'
  opt :dry_run, 'Simulate run', :default => false, :short => '-n'
end

SUB_COMMANDS = %w{dns register delete reserve unreserve list update}

global_opts = Trollop::options do
  version 'zombie rez utility 0.0.1'
  banner <<-EOS
Zombie rez resource management. Specify a command with -h option for more information.

Commands:
  dns
  list
  register
  delete
  reserve
  unreserve
  update
  buildflag

Usage:
  rez_util [command] <options>
EOS
  stop_on SUB_COMMANDS
end

cmd = ARGV.shift
cmd_opts = case cmd
  when 'dns'
    Trollop::options do
      common_opts
      opt :id, 'A VPC-standard id', :type => :string
      opt :verify, 'verify dns entries', :type => :boolean, :default => false
      opt :ticket, 'master ticket', :type => :string
      opt :type, 'vrealm type - vpc-standard or vrealm-multitenant-dr2c', :type => :string, :default => 'vpc-standard'
    end
  when 'list'
    Trollop::options do
      common_opts
      opt :reserved, 'List reserved records', :type => :boolean, :default => false
      opt :limit, 'Record limit', :type => :integer, :default => 100
      opt :type, 'Resource type', :type => :string, :default => 'vpc-standard'
    end
  when 'register'
    Trollop::options do
      common_opts
      opt :id, 'A VPC-standard id', :type => :string
      opt :compute, '# of compute host', :type => :integer, :default => 2
      opt :storage, '# of storage luns', :type => :integer, :default => 2
      opt :vcd_version, 'vcd_version', :type => :string, :default => '5.6'
      opt :shard, 'shard', :type => :string, :default => '0'
      opt :pod_base_network, 'pod_base_network', :type => :string, :default => '172.16.0.0/12'
      opt :management_dns_zone, 'management_dns_zone', :type => :string, :default => 'se.vpc.vmw'
      opt :cloudtype, "type of cloud being built ( dedicated, multi_tenant, etc )", :type => :string, :default => 'dedicated'
      opt :type, 'Resource type', :type => :string, :default => 'vpc-standard'
      opt :vcd_cell_count, '# of vcd cells', :default => '2'
      opt :network_manager_version, 'version of vsm/nsx', :default => '6.0.5'
    end
  when 'delete'
    Trollop::options do
      common_opts
      opt :type, 'Resource type', :type => :string, :default => 'vpc-standard'
      opt :rmq_server, 'RabbitMQ Server', :type => :string 
      opt :id, 'A VPC-standard id', :type => :string
    end
  when 'buildflag'
    Trollop::options do
      common_opts
      opt :type, 'Resource type', :type => :string, :default => 'vpc-standard'
      opt :rmq_server, 'RabbitMQ Server', :type => :string 
      opt :id, 'A VPC-standard id', :type => :string
    end
  when 'reserve'
    Trollop::options do
      common_opts
      opt :ids, 'A comma separated list of ids', :type => :string
      opt :res_id, 'Reservation id', :type => :string, :default => 'zai:mock_run'
      opt :type, 'Resource type', :type => :string, :default => 'vpc-standard'
    end
  when 'unreserve'
    Trollop::options do
      common_opts
      opt :ids, 'A comma separated list of ids', :type => :string
      opt :res_id, 'Reservation id', :type => :string, :default => 'zai:mock_run'
      opt :type, 'Resource type', :type => :string, :default => 'vpc-standard'
    end
  when 'update'
    Trollop::options do
      common_opts
      opt :id, 'A VPC-standard id', :type => :string
      opt :backup, 'Backup data', :type => :boolean, :default => true
      opt :type, 'type of cloud', :type => :string, :default => 'vpc-standard'
    end
  else
    Trollop::die "unknown subcommand, availble commands are: #{SUB_COMMANDS.inspect}"
  end

opts = global_opts.merge(cmd_opts)

Trollop::die :server, "must provide server" unless opts[:server]

case cmd
  when 'dns'
    Trollop::die :id, "must provide resource id" unless cmd_opts[:id]
    dns(opts)
  when 'unreserve'
    Trollop::die :ids, "must provide resource id" unless cmd_opts[:ids]
    unreserve(opts)
  when 'reserve'
    Trollop::die :ids, "must provide resource id" unless cmd_opts[:ids]
    reserve(opts)
  when 'register'
    Trollop::die :id, "must provide resource id" unless cmd_opts[:id]
    register(opts)
  when 'delete'
    Trollop::die :id, "must provide resource id" unless cmd_opts[:id]
    delete(opts)
  when 'list'
    list(opts)
  when 'update'
    Trollop::die :id, "must provide resource id" unless cmd_opts[:id]
    opts[:path] = "rez_zapi/v1/resource/#{opts[:type]}"
    update(opts)
  when 'buildflag'
    puts cmd_opts
    Trollop::die :id, "must provide resource id" unless cmd_opts[:id]
    buildflag(opts)
end
