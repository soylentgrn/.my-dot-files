#!/usr/bin/env ruby
require 'rbvmomi'
require 'trollop'
require 'highline/import'
require 'hashie'
require 'colorize'

opts = Trollop::options do
  opt :username,   'vCenter username',       :type => :string, :default => 'soylent'
  opt :vcenter,    'vCenter hostname',       :type => :string, :required => true
  opt :vm_name,    'Name of target VM',      :type => :string
  opt :datacenter, 'Name of the datacenter', :type => :string, :default => nil
  opt :action,     'Action to perform',      :type => :string, :default => 'details'
end

Trollop::die :action,
  "Invalid action: #{opts[:action]}. Valid options are: details, poweron, and poweroff" unless
    opts[:action] =~ /details|powero(n|ff)|list_all|list_powered_on_vms/i
  "--vm-name option is required for details, poweron, poweroff, and list_powered_on_vms actions" if
    opts[:action] =~ /details|powero(n|ff)|list_powered_on_vms/i
opts[:password] = ask("Enter password: ") { |q| q.echo="*"}

# Login to vCenter
def login(host,user,password)
  RbVmomi::VIM.connect :host => host, :user => user, :password => password, :insecure => true
end

# Get all datacenters from vCenter
def find_datacenter(vim,name = nil)
  vim.serviceInstance.find_datacenter if name.nil?
end

# Get all VMs from vCenter
def get_vms(vim, vm_prop=nil)
  vm_prop = %w(name runtime.powerState config.guestFullName summary.guest.ipAddress summary.guest.toolsStatus) if vm_prop.nil?
  pc = vim.serviceInstance.content.propertyCollector
  viewmgr = vim.serviceInstance.content.viewManager
  rootFolder = vim.serviceInstance.content.rootFolder
  vmview =  viewmgr.CreateContainerView(
              {
                :container => rootFolder,
                :type => ['VirtualMachine'],
                :recursive => true
              }
            )
  filterSpec =  RbVmomi::VIM.PropertyFilterSpec(
                  :objectSet => [
                    :obj => vmview,
                    :skip => true,
                    :selectSet => [
                      RbVmomi::VIM.TraversalSpec(
                        :name => "traverseEntities",
                        :type => "ContainerView",
                        :path => "view",
                        :skip => false
                      )
                    ]
                  ],
                  :propSet => [
                      {
                        :type => 'VirtualMachine',
                        :pathSet => vm_prop
                      }
                  ]
                )
  build_vms_hash pc.RetrieveProperties(:specSet => [filterSpec])
end

def build_vms_hash(vms)
  vm_hash = Hashie::Mash.new

  vms.each { |vm|
    name =
      vm.propSet.find { |prop|
        prop.name == 'name'
      }.val.to_sym
    vm_hash[name] = Hashie::Mash.new
    vm_hash[name][:obj] = vm.obj
    vm_hash[name][:properties] = {}
    vm.propSet.each { |prop|
      vm_hash[name][:properties][prop.name.to_sym] = prop.val
    }
  }
  vm_hash
end

# Find specific VM from list returned by get_vms
def find_vm(vim, vm_name)
  vms = get_vms vim
  raise 'No matching VM found.' if vms[vm_name].nil?
  vms[vm_name]
end

# Print VM details from properties returned by find_vm()
def vm_details(vim, vm_name)
  vm = find_vm vim, vm_name
  puts '--------------------'
  puts '|    VM Details     |'
  puts '--------------------'
  vm.properties.each { |prop,val|
    printf "  %-30s %s\n", prop, val
  }
end

# Power on VM
def power_on_vm(vim, vm_name)
  vm = find_vm vim, vm_name
  puts 'VM found sending power on request'.yellow
  vm.obj.PowerOnVM_Task.wait_for_completion
  puts 'Power on successful'.green
  vm_details vim, vm_name
end

# Power off VM
def power_off_vm(vim, vm_name)
  vm = find_vm vim, vm_name
  puts 'VM found sending power off request'.yellow
  vm.obj.PowerOffVM_Task.wait_for_completion
  puts 'Power off successful'.green
  vm_details vim, vm_name
end

def list_all(vim)
  vms = (get_vms vim).reject { |k| k == 'obj' }
  puts '--------------------'
  puts '|       VMs        |'
  puts '--------------------'
  vms.each { |key,value|
    puts value.properties.name
  }
end

def list_powered_on_vms(vim)
  vms = (get_vms vim).reject { |k| k == 'obj' }

  puts '--------------------'
  puts '|  Powered On VMs  |'
  puts '--------------------'
  vms.each { |key,value|
    puts value.properties.name if
      value[:properties][:'runtime.powerState'] == 'poweredOn'
  }
end

begin
  # Login
  vim = login opts[:vcenter], opts[:username], opts[:password]

  # Execute specified action
  vm_details vim, opts[:vm_name] if opts[:action].downcase == 'details'
  power_on_vm vim, opts[:vm_name] if opts[:action].downcase == 'poweron'
  power_off_vm vim, opts[:vm_name] if opts[:action].downcase == 'poweroff'
  list_all vim if opts[:action].downcase == 'list_all'
  list_powered_on_vms vim if opts[:action].downcase == 'list_powered_on_vms'
rescue => e
  puts "ERROR: #{e}".red
end
